#!/usr/bin/env node

/**
 * Module dependencies.
 */
const debug = require("debug")("express-sequelize");
const models = require("../src/models");
const app = require("../src/app");
const dotenv = require("dotenv");
const fs = require("fs");

/**
 * Environment Variables
 * and HTTPS Options
 */
dotenv.config();
const httpsEnabled = process.env.HTTPS_ENABLED === "true";
const https = httpsEnabled ? require("https") : require("http");

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

/**
 * Create HTTPS Options
 *
 */
const httpsOptions = { key: fs.readFileSync("./certs/key.pem"), cert: fs.readFileSync("./certs/cert.pem") };

/**
 * Create server
 */
const server = httpsEnabled ? https.createServer(httpsOptions, app) : https.createServer(app);

models.sequelize.sync().then(() => {
	server.listen(port, () => {
		debug(`Express server listening on port ${server.address().port}`);
	});
	server.on("error", onError);
	server.on("listening", onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
	if (error.syscall !== "listen") {
		throw error;
	}

	const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			console.error(`${bind} requires elevated privileges`);
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(`${bind} is already in use`);
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
	const addr = server.address();
	const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
	console.log(`Listening on ${bind}`);
}
